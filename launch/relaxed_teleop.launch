<launch>

    <arg name="xacro_path"   default="$(find ur5_allegro_moveit)/models/ur5_allegro.xacro" />
    <arg name="teleop_mode_absolute"   default="true"/>
    <arg name="sim"   default="true"/>

    <arg name="urdf_args"   default=""/>
    <arg name="load_xacro"   default="true"/>
    <arg name="viz"   default="true"/>


    <include file="$(find relaxed_ik)/launch/load_info_file.launch">
        <!-- <arg name="info_file_name" value="ur5_allegro_info_.yaml"/>  -->
        <arg name="info_file_name" value="ur5_allegro_info_VIRTUOSE.yaml"/>            
    </include>



    <include  file="$(find ur5_allegro_moveit)/launch/demo.launch" >
        <arg name="rviz" value="false"/>
    </include>
        <include file="$(find allegro_hand_kdl)/launch/pose_action_server.launch">
            <arg name="NUM" value="0"/>
            <arg name="HAND" value="right"/>
            <arg name="TIME_LIMIT" value="4.0" />
            <arg name="TORQUE_TOPIC" value="position_torque"/>  
        </include>
        <!-- <include file="$(find allegro_hand_kdl)/launch/cartesian_pose_control.launch"> -->
                <!-- <arg name="NUM" default="0"/> -->
                <!-- <arg name="HAND" default="right"/> -->
                <!-- <arg name="MAINTAIN" default="false" /> -->
                <!-- <arg name="POSE" default="relax" /> -->
                <!-- <arg name="TIME_LIMIT" default="4.0" /> -->
                <!-- <arg name="NS_POSE" default="allegro_hand_kdl/poses" /> -->
                <!-- <arg name="TORQUE_TOPIC" default="position_torque"/> -->
        <!-- </include> -->

        <include file="$(find allegro_hand_kdl)/launch/combine_torques.launch" />
    <!-- <include unless="$(arg sim)" file="$(find ur5_allegro_moveit)/launch/move_group.launch"> -->
            <!-- <arg name="allow_trajectory_execution" value="true"/> --> -->
            <!-- <arg name="fake_execution" value="false"/> -->
            <!-- <arg name="info" value="true"/> -->
            <!-- <arg name="debug" value="False"/> -->
    <!-- </include> --> -->

<!--  -->
    <!-- Load Xacro file -->

    <!-- Launch Robot State Publisher -->


    <!-- <group if="$(arg load_xacro)"> -->
        <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="base2common_world" args="0 0 0 0 0 0 1 base common_world" /> -->
    <!-- </group> -->

    <!-- <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" ns="/" >
        <param name="publish_frequency" type="double" value="60.0" />
        <param name="tf_prefix" type="string" value="" />
    </node> -->
    
    <group>
        <include file="$(find ur5_allegro_moveit)/launch/planning_context.launch" >
            <arg name="load_robot_description" value="False"/>
        </include>

        <!-- We do not have a robot connected, so publish fake joint states -->
        <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"> -->
            <!-- <param name="use_gui" value="$(arg joint_state_gui)"/> -->
            <!-- <rosparam param="source_list">[merged_states]</rosparam> -->
            <!-- <rosparam param="zeros"> -->
            <!-- shoulder_pan_joint: -1.085 -->
            <!-- shoulder_lift_joint: -1.158 -->
            <!-- elbow_joint: 1.924 -->
            <!-- wrist_1_joint: 3.868 -->
            <!-- </rosparam> -->
        <!-- </node> -->
        <!-- <node name="jointState2tf_$(arg NUM)" -->
            <!-- pkg="robot_state_publisher" -->
            <!-- type="robot_state_publisher" -->
            <!-- if="$(arg TF)"> -->
            <!-- <remap from="joint_states" to="allegroHand_$(arg NUM)/joint_states"/> -->
        <!-- </node> -->

        <!-- Given the published joint states, publish tf for the robot links -->
        <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
            <remap from="joint_states" to="allegroHand_0/joint_states"/>
        </node> -->
    </group>


    <!-- Launch RelaxedIK -->
    <node pkg="relaxed_ik" type="relaxed_ik_node.py" name="relaxed_ik_node" />
    <!-- <rosparam command="load" file="$(find teleoperation_ur5_allegro_leap)/src/teleoperation_ur5_allegro_leap/teleop/ur5/config/ur5_ee_bounds.yaml" /> -->
    <group>
        <node pkg="virtuose_teleoperation" type="relaxed_ik_solution_manager.py" name="relaxedIK2UR5" output="screen"/>
        <!-- <node pkg="virtuose_teleoperation" type="relaxed_cartesian_mapping.py" name="Haption2relaxedIK" output="screen"/> -->
        <node pkg="virtuose_teleoperation" type="fake_relaxed_cartesian_mapping.py" name="FakeHaption2relaxedIK" output="screen"/>

    </group>
    
    <!-- <node pkg="teleoperation_ur5_allegro_leap" type="relaxed_ik_request_interface.py" name="ur5_2_relaxedIK" output="screen">
        <param name="/ur5_allegro_teleop/ur5/teleop_mode_absolute" type="bool" value="$(arg teleop_mode_absolute)" />
        <param name="workspace_yaml" type="string" value="$(find teleoperation_ur5_allegro_leap)/src/teleoperation_ur5_allegro_leap/teleop/ur5/config/ur5_ee_bounds.yaml" />
        <param name="simulated" type="bool" value="$(arg sim)" />
    </node> -->

    <node pkg="virtuose_teleoperation" type="boundary_controller.py" name="boundary_controller" />

    <group if="$(arg viz)">
        <node name="teleop_rviz" pkg="rviz" type="rviz" args="-d $(find virtuose_teleoperation)/rviz/virtuose_teleop.rviz" />
    </group>
</launch>