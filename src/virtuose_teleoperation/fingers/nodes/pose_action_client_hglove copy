#!/usr/bin/env python

"""
Allegro Hand Control Node

This node subscribes to HGlove messages and controls the Allegro Hand
using either joint or cartesian control methods.

Author: [Your Name]
Date: [Current Date]
"""

import rospy
import actionlib
import numpy as np
import tf.transformations
from virtuose.msg import out_virtuose_pose
from allegro_hand_kdl.msg import PoseControlAction, PoseControlGoal, PoseControlResult, PoseControlFeedback
from geometry_msgs.msg import Pose
from sensor_msgs.msg import JointState

class PoseActionClient:
    """
    A class to manage the control of the Allegro Hand based on HGlove input.
    """

    def __init__(self, init_pose=None):
        """
        Initialize the PoseActionClient.

        Args:
            init_pose (list): Initial pose for the hand (optional)
        """
        self._initialize_flags()
        self._initialize_messages()
        self._setup_subscribers_and_publishers()
        
        self.cartesian_controller = False
        self.joints_controller = True

        # Initialize action client
        self.client = actionlib.SimpleActionClient('pose_control_action', PoseControlAction)
        self.client.wait_for_server()

        self._main_control_loop()

    def _initialize_flags(self):
        """Initialize all flags used in the class."""
        self.initial_pose_th_flag = self.initial_pose_in_flag = self.initial_pose_mid_flag = False
        self.initial_articular_th_flag = self.initial_articular_in_flag = self.initial_articular_mid_flag = False

    def _initialize_messages(self):
        """Initialize all message objects used in the class."""
        self.q1_th_inv = self.q1_in_inv = self.q1_mid_inv = [0, 0, 0, 1]
        self.q2_th = self.q2_in = self.q2_mid = [0, 0, 0, 1]
        
        self.initial_pose_th_msg = self.initial_pose_in_msg = self.initial_pose_mid_msg = out_virtuose_pose()
        self.delta_pose_th_msg = self.delta_pose_in_msg = self.delta_pose_mid_msg = out_virtuose_pose()
        
        self.initial_articular_th_msg = self.initial_articular_in_msg = self.initial_articular_mid_msg = JointState()
        self.delta_articular_th_msg = self.delta_articular_in_msg = self.delta_articular_mid_msg = JointState()

        self._initialize_delta_values()

    def _initialize_delta_values(self):
        """Initialize all delta values used for calculations."""
        self.de_in_x = self.de_in_y = self.de_in_z = self.derot_in_x = self.derot_in_y = self.derot_in_z = self.derot_in_w = 0.0
        self.de_mid_x = self.de_mid_y = self.de_mid_z = self.derot_mid_x = self.derot_mid_y = self.derot_mid_z = self.derot_mid_w = 0.0
        self.de_pin_x = self.de_pin_y = self.de_pin_z = self.derot_pin_x = self.derot_pin_y = self.derot_pin_z = self.derot_pin_w = 0.0
        self.de_th_x = self.de_th_y = self.de_th_z = self.derot_th_x = self.derot_th_y = self.derot_th_z = self.derot_th_w = 0.0

    def _setup_subscribers_and_publishers(self):
        """Set up all ROS subscribers and publishers."""
        # Cartesian subscribers and publishers
        self.out_thumb_subscriber = rospy.Subscriber("/out_thumb_pose", out_virtuose_pose, self._on_out_thumb_pose_received)
        self.delta_pose_th_pub = rospy.Publisher("/delta_pose_thumb", out_virtuose_pose, queue_size=5)

        self.out_index_subscriber = rospy.Subscriber("/out_index_pose", out_virtuose_pose, self._on_out_index_pose_received)
        self.delta_pose_in_pub = rospy.Publisher("/delta_pose_index", out_virtuose_pose, queue_size=5)

        self.out_middle_subscriber = rospy.Subscriber("/out_middle_pose", out_virtuose_pose, self._on_out_middle_pose_received)
        self.delta_pose_mid_pub = rospy.Publisher("/delta_pose_middle", out_virtuose_pose, queue_size=5)

        # Joint subscribers and publishers
        self.out_thumb_articular_subscriber = rospy.Subscriber("/out_thumb_articular_pose", JointState, self._on_out_thumb_articular_received)
        self.delta_articular_th_pub = rospy.Publisher("/delta_articular_thumb", JointState, queue_size=5)

        self.out_index_articular_subscriber = rospy.Subscriber("/out_index_articular_pose", JointState, self._on_out_index_articular_received)
        self.delta_articular_in_pub = rospy.Publisher("/delta_articular_index", JointState, queue_size=5)

        self.out_middle_articular_subscriber = rospy.Subscriber("/out_middle_articular_pose", JointState, self._on_out_middle_articular_received)
        self.delta_articular_mid_pub = rospy.Publisher("/delta_articular_middle", JointState, queue_size=5)

    def _main_control_loop(self):
        """Main control loop for joint control."""
        if self.joints_controller:
            rospy.loginfo("JOINT CONTROLLER ACTIVE")
            while not rospy.is_shutdown():
                joint_pose = self._calculate_joint_pose()
                goal = PoseControlGoal(joint_pose=joint_pose)
                self.client.send_goal(goal, feedback_cb=self.feedback_callback)
                rospy.sleep(0.1)

        self.joints_controller = False
        rospy.loginfo("Pose action client: finished joint pose execution")

    def _calculate_joint_pose(self):
        """Calculate the joint pose based on delta values."""
        a_in, b_in, c_in = self.delta_articular_in_msg.position[:3]
        a_mid, b_mid, c_mid = self.delta_articular_mid_msg.position[:3]
        a_th, b_th, c_th = self.delta_articular_th_msg.position[:3]

        return [
            0.1+a_in, 0.1+b_in*1.5, 0.0+b_in, 0.2+c_in*1.0,
            0.1+a_in, 0.1+b_in*1.5, 0.0+b_in, 0.2+c_in*1.0,
            0.1+a_mid, 0.1+b_mid*1.3, 0.0+b_mid, 0.0+c_mid*0.8,
            3.14, -0.2-a_th*1.0, 0.0+2*b_th, -0.2+0.15*(b_th-c_th)
        ]

    def _on_out_thumb_pose_received(self, out_thumb_msg):
        """Handle incoming thumb pose messages."""
        if not self.initial_pose_th_flag:
            self._set_initial_thumb_pose(out_thumb_msg)
        else:
            self._calculate_thumb_delta(out_thumb_msg)

    def _set_initial_thumb_pose(self, out_thumb_msg):
        """Set the initial thumb pose."""
        self.initial_pose_th_msg = out_thumb_msg
        self.initial_pose_th_flag = True
        rospy.loginfo(f"INITIAL THUMB POSE: {self.initial_pose_th_msg}")

    def _calculate_thumb_delta(self, out_thumb_msg):
        """Calculate the delta for thumb pose."""
        self._set_quaternions(self.initial_pose_th_msg, out_thumb_msg, 'th')
        rotation = tf.transformations.quaternion_multiply(self.q2_th, self.q1_th_inv)
        self._set_delta_pose(self.delta_pose_th_msg, self.initial_pose_th_msg, out_thumb_msg, rotation)
        self._delta_thumb()
        self.delta_pose_th_pub.publish(self.delta_pose_th_msg)

    # Similar methods for index and middle fingers...

    def _set_quaternions(self, initial_msg, current_msg, finger):
        """Set quaternions for rotation calculations."""
        q1_inv = getattr(self, f'q1_{finger}_inv')
        q2 = getattr(self, f'q2_{finger}')

        q1_inv[:3] = [initial_msg.virtuose_pose.rotation.x, initial_msg.virtuose_pose.rotation.y, initial_msg.virtuose_pose.rotation.z]
        q1_inv[3] = -initial_msg.virtuose_pose.rotation.w  # Negate for inverse

        q2[:] = [current_msg.virtuose_pose.rotation.x, current_msg.virtuose_pose.rotation.y, 
                 current_msg.virtuose_pose.rotation.z, current_msg.virtuose_pose.rotation.w]

    def _set_delta_pose(self, delta_msg, initial_msg, current_msg, rotation):
        """Set the delta pose message."""
        delta_msg.virtuose_pose.translation.x = round(initial_msg.virtuose_pose.translation.x - current_msg.virtuose_pose.translation.x, 2)
        delta_msg.virtuose_pose.translation.y = round(initial_msg.virtuose_pose.translation.y - current_msg.virtuose_pose.translation.y, 2)
        delta_msg.virtuose_pose.translation.z = round(initial_msg.virtuose_pose.translation.z - current_msg.virtuose_pose.translation.z, 2)
        delta_msg.virtuose_pose.rotation.x = round(rotation[0], 2)
        delta_msg.virtuose_pose.rotation.y = round(rotation[1], 2)
        delta_msg.virtuose_pose.rotation.z = round(rotation[2], 2)
        delta_msg.virtuose_pose.rotation.w = round(rotation[3], 2)

    def _delta_thumb(self):
        """Update thumb delta values."""
        self.de_th_x = round(self.delta_pose_th_msg.virtuose_pose.translation.x, 2)
        self.de_th_y = round(self.delta_pose_th_msg.virtuose_pose.translation.y, 2)
        self.de_th_z = round(self.delta_pose_th_msg.virtuose_pose.translation.z, 2)
        self.derot_th_x = round(self.delta_pose_th_msg.virtuose_pose.rotation.x, 2)
        self.derot_th_y = round(self.delta_pose_th_msg.virtuose_pose.rotation.y, 2)
        self.derot_th_z = round(self.delta_pose_th_msg.virtuose_pose.rotation.z, 2)
        self.derot_th_w = round(self.delta_pose_th_msg.virtuose_pose.rotation.w, 2)

    # Similar methods for index and middle fingers...

    def feedback_callback(self, feedback):
        """Handle feedback from the action client."""
        rospy.logdebug("Pose action client: got feedback:")
        rospy.logdebug(feedback)

    @staticmethod
    def list_to_pose(pose_list):
        """Convert a list to a Pose message."""
        pose = Pose()
        pose.position.x, pose.position.y, pose.position.z = pose_list[:3]
        pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w = pose_list[3:]
        return pose

if __name__ == '__main__':
    try:
        rospy.init_node('pose_action_client')
        PoseActionClient()
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.logerr("Pose action client: interrupted by signal")
        rospy.logerr("Pose action client: terminating")
