#! /usr/bin/env python
import rospy
from virtuose.msg import out_virtuose_pose
# msg=out_virtuose_pose
# msg.virtuose_pose.rotation.x
import actionlib
import numpy as np
from allegro_hand_kdl.msg import PoseControlAction, PoseControlGoal, PoseControlResult, PoseControlFeedback
from geometry_msgs.msg import Pose
import tf.transformations

#this code is based on pose_action_client_example of Gokhan Solak, an updated version that uses classes is in the same folder
###test
h_thumb_x = 0.0
h_thumb_y = 0.0
h_thumb_z = 0.0
quat_thumb_delta_x=0.0
quat_thumb_delta_y=0.0
quat_thumb_delta_z=0.0
quat_thumb_delta_w=0.0

n_sin = np.arange(50)
dt = 0.001
x_sin = np.sin(2 * np.pi * 50 * n_sin * dt)
x_sin=x_sin/15
print(x_sin)
initial_pose_flag=False
q1_inv=[0,0,0,1]
q2=[0,0,0,1]

initial_pose_msg=out_virtuose_pose()
delta_pose_msg=out_virtuose_pose()
delta_pose_pub = rospy.Publisher("/delta_pose_thumb", out_virtuose_pose, queue_size=5)


# this is a program that take as input ros messages from hglove to control allegro hand
def __OnThumbDeltaReceived(thumb_delta_msg): #potrei toglierla
    global h_thumb_x,h_thumb_y,h_thumb_z,quat_thumb_delta_x,quat_thumb_delta_y,quat_thumb_delta_z,quat_thumb_delta_w

    h_thumb_x = float(thumb_delta_msg.virtuose_pose.translation.x)
    h_thumb_y = float(thumb_delta_msg.virtuose_pose.translation.y)
    h_thumb_z = float(thumb_delta_msg.virtuose_pose.translation.z)
    #print("h_thumb_x,h_thumb_y,h_thumb_z", h_thumb_x , h_thumb_y , h_thumb_z)
    quat_thumb_delta_x=float(thumb_delta_msg.virtuose_pose.rotation.x)
    quat_thumb_delta_y=float(thumb_delta_msg.virtuose_pose.rotation.y)
    quat_thumb_delta_z=float(thumb_delta_msg.virtuose_pose.rotation.z)
    quat_thumb_delta_w=float(thumb_delta_msg.virtuose_pose.rotation.w)

def __OnOutVirtuosePoseReceived(out_thumb_msg):
    global initial_pose_flag,initial_pose_msg, q1_inv,q2,delta_pose_pub
    #msg=out_virtuose_pose()
    #msg.virtuose_pose.translation.x

    
    out_thumb_msg.virtuose_pose.translation.x

    #save the initial pose
    if initial_pose_flag==False:
        initial_pose_msg=out_thumb_msg
        initial_pose_flag=True

    #calculate delta pose of current pose wrt initial pose
    elif initial_pose_flag ==True:
        delta_pose_msg.virtuose_pose.translation.x = initial_pose_msg.virtuose_pose.translation.x - out_thumb_msg.virtuose_pose.translation.x
        delta_pose_msg.virtuose_pose.translation.y = initial_pose_msg.virtuose_pose.translation.y - out_thumb_msg.virtuose_pose.translation.y
        delta_pose_msg.virtuose_pose.translation.z = initial_pose_msg.virtuose_pose.translation.z - out_thumb_msg.virtuose_pose.translation.z

        q1_inv[0] = initial_pose_msg.virtuose_pose.rotation.x
        q1_inv[1] = initial_pose_msg.virtuose_pose.rotation.y
        q1_inv[2] = initial_pose_msg.virtuose_pose.rotation.z
        q1_inv[3] = -(initial_pose_msg.virtuose_pose.rotation.w) # Negate for inverse http://wiki.ros.org/tf2/Tutorials/Quaternions#Relative_rotations

        q2[0] = out_thumb_msg.virtuose_pose.rotation.x
        q2[1] = out_thumb_msg.virtuose_pose.rotation.y
        q2[2] = out_thumb_msg.virtuose_pose.rotation.z
        q2[3] = out_thumb_msg.virtuose_pose.rotation.w

        delta_pose_msg.virtuose_pose.rotation=tf.transformations.quaternion_multiply(q2, q1_inv)
        #print("delta_pose_msg",delta_pose_msg)
        delta_pose_pub.publish(delta_pose_msg)
    

def feedbackCallback(feedback):
    global feedbacks_received
    feedbacks_received = True

    rospy.logdebug("pose_action_client: got feedback:")
    rospy.logdebug(feedback)


def list_to_pose(list):
    pose = Pose()
    pose.position.x = list[0]
    pose.position.y = list[1]
    pose.position.z = list[2]
    pose.orientation.x = list[3]
    pose.orientation.y = list[4]
    pose.orientation.z = list[5]
    pose.orientation.w = list[6]
    return pose



out_thumb_subscriber =  rospy.Subscriber("/out_thumb_pose", out_virtuose_pose, __OnOutVirtuosePoseReceived)

def main():

    #delta_pose_subscriber =  rospy.Subscriber("/out_virtuose_delta_pose", out_virtuose_pose, __OnThumbDeltaReceived)
    #enable the desired controller
    cartesian_controller=False
    joints_controller=True

    client =\
        actionlib.SimpleActionClient('pose_control_action', PoseControlAction)


    gg=1 
    if cartesian_controller==True:

        client.wait_for_server()
        k=0
        
        while not rospy.is_shutdown(): #finger 3=thumb  2 = pinkie 1= middle 0=index?
            # create a cartesian pose for testing
            # 'relax' pose from cartesian_poses.yaml
            finger_poses = []
            print("CARTESIAN CONTROLLER cycle ", k )
            gg=gg*(-1)
            dx=0.01*gg
            h_thumb_x = x_sin[k]

                                            # position [x, y, z]  +  quaternion [x, y, z, w]
            ##relax configuration
            finger_poses.append(list_to_pose([0.0935, 0.0873, 0.1425, 0.9597, 0.2028, 0.1940, 0.0015])) #finger 0
            finger_poses.append(list_to_pose([round(0.1064,2), round(0.0092,2), round(0.1627,2), round(0.9020,2), round(0.0393,2), round(0.4294,2), round(-0.0178,2)])) #finger 1
            finger_poses.append(list_to_pose([0.0689, -0.0519, 0.1396,0.9860, -0.0378, 0.1579, -0.0373]))  #finger 2 mignolo
            finger_poses.append(list_to_pose([round(0.0687+h_thumb_x ,2) , round(0.1170+h_thumb_x ,2), round(0.0563+h_thumb_x ,2) , 0.1961 + quat_thumb_delta_x, 0.0134+quat_thumb_delta_y, 0.4522+quat_thumb_delta_z, 0.8699+quat_thumb_delta_z])) #finger 3
        
        # #print("h_thumb_x,h_thumb_y,h_thumb_z", round(h_thumb_x,2) , h_thumb_y , h_thumb_z)

            # if(gg==-1):
            #     finger_poses.append(list_to_pose([0.0935, 0.0873, 0.1425, 0.9597, 0.2028, 0.1940, 0.0015])) #finger 0
            #     finger_poses.append(list_to_pose([0.1064, 0.0092, 0.1627, 0.9020, 0.0393, 0.4294, -0.0178])) #finger 1
            #     finger_poses.append(list_to_pose([0.0979, -0.0651, 0.1759, 0.8645, -0.0846, 0.4953, -0.0005])) #finger 2
            #     finger_poses.append(list_to_pose([0.1313, 0.0571, 0.0233, -0.0800, 0.2823, 0.1284, 0.9472])) #finger 3
            # else:
            #     finger_poses.append(list_to_pose([0.0704, 0.0564, 0.1285, 0.9956, 0.0682, -0.0429, 0.0468]))
            #     finger_poses.append(list_to_pose([0.0815, -0.0002, 0.1390, 0.9809, -0.0008, 0.1944, 0.0009])) #finger 1
            #     finger_poses.append(list_to_pose([0.0689, -0.0519, 0.1396,0.9860, -0.0378, 0.1579, -0.0373])) #finger 2
            #     finger_poses.append(list_to_pose([0.0687, 0.1170, 0.0563, 0.1961, 0.0134, 0.4522, 0.8699])) #finger 3

       
            #print("finger_poses",finger_poses)[position:   x: 0.0935  y: 0.0873  z: 0.1425 orientation:   x: 0.9597  y: 0.2028  z: 0.194  w: 0.0015,

            # send the pose to the server
            goal = PoseControlGoal(cartesian_pose=finger_poses)
            client.send_goal(goal, feedback_cb=feedbackCallback)
            # to test the feedback mechanism:
            global feedbacks_received
            feedbacks_received = False
            k=k+1
            if k==50:
                k=0
            #client.wait_for_result()
            rospy.sleep(0.3)

        client.wait_for_result()

        print("pose_action_client: finished cartesian pose execution")
        print("feedbacks received: "+ str(feedbacks_received))

        rospy.sleep(2.0)
    
    if joints_controller==True:
        client.wait_for_server()
        print("JOINT CONTROLLER")
        k=0
        while not rospy.is_shutdown(): #finger 3=thumb  2 = pinkie 1= middle 0=index?
            # create a joint pose for testing
            # 'point1' pose from joint_poses.yaml
            gg=gg*(-1)
            dx=0#0.2*gg
            #h_thumb_x = x_sin[k]
            #print(h_thumb_x)

            joint_pose = \
                [0.06+dx, 0.50+dx, 0.13+dx, -0.14+dx,\
                0.0, 1.32, 1.72, 0.0,\
                0.0+dx, 1.32+dx, 1.72+dx, 0.0+dx,\
                0.72+dx, 0.01+dx, 0.40+dx, 1.5+dx]

            #print("joint_pose",joint_pose)
            # send the pose to the server
            goal = PoseControlGoal(joint_pose=joint_pose)
            client.send_goal(goal, feedback_cb=feedbackCallback)
            # to test the feedback mechanism:
            feedbacks_received = False
            #k=k+1
           # if k==50:
           #    k=0
            rospy.sleep(0.2)#/////############### SOPRA LO 0.2(5hz) FUNZIONA ABBASTANZA BENE, best at 0.5(2hz)# ovviamente questo e' perche gli sto chiedendo di fare 0.4 radianti istantaneamente

            #client.wait_for_result()

        print("pose_action_client: finished joint pose execution")
        print("feedbacks received: "+ str(feedbacks_received))


if __name__ == '__main__':
    try:
        rospy.init_node('pose_action_client')
        main()
    except rospy.ROSInterruptException:
        print("pose_action_client: interrupted by signal")
    print("pose_action_client: terminating")
